# 1
def list_reverse(list_):  # объявляем функцию с одним параметром, которая возвращает список в обратном порядке
    return list_[::-1]  # функция, которая возвращает обратный список


# 2
def new_list(list_1):
    # объявляем функцию с одим параметром, которая заменяет первую 20 в списке (при ее наличие) на 200
    if 20 in list_1:  # условие: если 20 есть в списке
        index_20 = list_1.index(20)  # переменная, которая ссылается на индекс первого вхождения числа 20 в список
        list_1[index_20] = 200  # присваиваем новое значение элементу с индексом
    return list_1  # функция, которая возвращает список


# 3
def odd_eve(list_2):
    # объявляем функцию с одним параметром, которая сравнивает количество четных и нечетных чисел в списке
    odd = 0  # переменная, которая ссылается на значение 0
    eve = 0
    for i in list_2:  # цикл: для каждого элемента в списке
        if i % 2 == 0:  # условие: если элемент делиться на 2 без остатка
            eve += 1  # прибавляем 1 к значению переменной
        elif i % 2 != 0:  # альтернативное условие: если при деление на 2 есть остаток
            odd += 1  # прибавляем 1 к значению переменной
    if odd > eve:  # условие: если количество нечетных больше количества четных
        return 'Произведение 1, 3 и 6 элемента списка', list_2[0] * list_2[2] * list_2[5]
        # функция, которая возвращает значение произведения
    elif eve > odd:  # альтернативное условие: если количество четных чисел больше чем количество нечетных
        return 'Сумма всех чисел списка', sum(list_2)
        # функция, которая возвращает значение суммы всех элементов списка
    else:  # альтернатива, если ни одно из условий не выполнились
        return 'Количество четных и нечетных чисел равное'


# 4
def compare_(arr_1, arr_2):  # объявляем функцию с двумя параметрами, которая будет сравнивать элементы двух списков
    new_arr = []  # переменная, которая ссылается на пустой список
    for elem_1 in arr_1:  # цикл: для каждого элемента из первого списка
        for elem_2 in arr_2:  # цикл: для каждого элемента из второго спика
            if elem_1 == elem_2:  # условие: если один элемент = второму элементу
                new_arr.append(elem_1)  # метод, который добавляет элемент в конец списка
    return new_arr  # функция, которая возвращает список


# 5
def work_with_lisr(arr_3, arr_4, operation):
    # объявляем функцию с тремя переменными, которая будет возвращать результаты разных действий
    if operation == '+':  # условие
        return arr_3 + arr_4  # функция, которая возвращает объединенный список

    elif operation == '=':  # альтернативное условие
        arr_3.insert(2, 6)  # метод, который добавляет элемент 6 в позицию с индексом 2
        arr_4.insert(2, 6)
        return arr_3, arr_4  # функция, которая возвращает два списка

    elif operation == '-':  # альтернативное условие
        for elem in arr_3:  # цикл: для каждого элемента в списке
            if type(elem) == str:  # условие: если тип объекта строка
                arr_3.remove(elem)  # удаление элемента из списка
        for elem_2 in arr_4:  # цикл: для каждого элемента в списке
            if type(elem_2) == str:  # условие: если тип объекта строка
                arr_4.remove(elem_2)  # метод, который удаляет элемент
        return arr_3, arr_4  # функция, которая возвращает списки

    elif operation == '*':  # альтернативное условие
        return len(arr_3), len(arr_4)  # функция, которая возвращает количество элементов в каждом списке


# DZ
def list_num_letters(list_5):  # объявляем функцию с одним параметром
    sum_even = 0  # переменная, которая ссылается на значение 0
    vowels = 0
    consonant = 0
    letters_vowels = ['a', 'e', 'y', 'u', 'i', 'o']  # переменная типа список, которая ссылается на список гласных
    for elem in list_5:  # цикл: для каждого элемента в списке
        if type(elem) is int:  # условие: если тип объекта - целое число
            if elem % 2 == 0:  # условие: если число четное
                sum_even += elem  # добавляем значение числа к значению переменной

            if elem % 2 != 0:  # условие: если число нечетное
                index_ = list_5.index(elem)  # метод, который находит индекс первого вхождения числа
                list_5[index_] = 1  # присвоение объекту с индексом значения 1

        if type(elem) is str:  # условие: если тип объекта - строка
            for letter in elem:  # цикл: для каждого элемента в строке
                if letter in letters_vowels:  # условие: если элемент есть в списке гласных букв
                    vowels += 1  # добавляем 1 к значению переменной
                else:  # альтернативное условие
                    consonant += 1  # добавляем 1 к значению переменной
    return (f'Сумма всех четных чисел = {sum_even}, При замене всех нечетных чисел на 1 выведется - {list_5}, '
            f'Количество гласных - {vowels}, количество согласных - {consonant}')
    # встроенная функция котораы ыфыодит в кансоль информацию


# 1
my_list = [1, 2, 3, 4, 5, 6, 87, 354758, 27803, 849, 134, 6748]  # переменная типа список
print(list_reverse(my_list))  # встроенная функция, которая выводит в кансоль работу функции

# 2
my_list_1 = [1, 20, 21, 32, 200, 12, 20, 21, 20, 20, 86, 35]  # переменная с типом список
print(new_list(my_list_1))  # вызываем функцию и выводим ее работу в кансоль

# 3
my_list_2 = [1, 2, 3, 4, 5, 6, 7]  # переменная типа список
print(odd_eve(my_list_2))  # вызываем функцию и отображаем ее работу на экране

# 4
arr_1_ = [5, [1, 2], 2, 'r', 4, 'ee']  # переменная, которая ссылается на первый список
arr_2_ = [4, 'we', 'ee', 3, [1, 2]]  # переменная, которая ссыдается на второй список
print(compare_(arr_1_, arr_2_))  # вызываем функцию и отображаем ее работу на экране

# 5
arr_3_ = [4, 6, 'py', 78, 'tell']  # переменная, которая ссылается на список
arr_4_ = [44, 'hello', 56, 'exept', 3]  # переменная, которая ссылается на список

operation_ = input("""Введите то, что хотите сделать со списком (сложить(+), добавить элемент на позицию(=),
удалить все текстовые переменные (-), посчитать количество элементов(*)): """)
# переменная, которая ссылается на значение вводимое с клавиатуры

print(work_with_lisr(arr_3_, arr_4_, operation_))  # вызываем функцию и выводим результат ее работы на экран

# DZ
list_5_ = [15, 48, 'hello', 6, 19, 'world']
print(list_num_letters(list_5_))
